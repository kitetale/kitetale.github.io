{"version":3,"file":"component---works-rapidproto-mdx-420ce869fc92cd04e40c.js","mappings":"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","sources":["webpack://ashley-kim/./works/rapidproto.mdx","webpack://ashley-kim/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { getImage, GatsbyImage } from \"gatsby-plugin-image\";\nimport { Link } from \"gatsby\";\nimport { infogrid, overview, closerLineHeight, twoGrid, threeGrid, threeGrid2, imgGrid, elem2, infos, info, image, image2, orange, subTitle, video2 } from \"../src/pages/works/WorkPage.module.css\";\nimport gear1 from \"../src/images/rapid-proto/mechenism_a.jpg\";\nimport gear2 from \"../src/images/rapid-proto/mechenism_b.jpg\";\nimport gear_anim from \"../src/images/rapid-proto/mechenism.mp4\";\nimport rhino1 from \"../src/images/rapid-proto/chair_a.jpg\";\nimport rhino2 from \"../src/images/rapid-proto/chair_b.jpg\";\nimport rhino3 from \"../src/images/rapid-proto/wavyArc_a.jpg\";\nimport rhino5 from \"../src/images/rapid-proto/exterior_a.jpg\";\nimport rhino6 from \"../src/images/rapid-proto/exterior_b.jpg\";\nimport rhino7 from \"../src/images/rapid-proto/exterior_c.jpg\";\nimport mb1 from \"../src/images/rapid-proto/moon_bunnies_a.jpg\";\nimport mb2 from \"../src/images/rapid-proto/moon_bunnies_b.jpg\";\nimport mb3 from \"../src/images/rapid-proto/moon_bunnies_c.jpg\";\nimport mb4 from \"../src/images/rapid-proto/moon_bunnies_d.jpg\";\nimport mb5 from \"../src/images/rapid-proto/moon_bunnies_e.jpg\";\nimport mb6 from \"../src/images/rapid-proto/moon_bunnies_f.jpg\";\nimport mb_anim from \"../src/images/rapid-proto/Animation.mp4\";\nimport led_gg from \"../src/images/rapid-proto/gg.png\";\nimport led_smile from \"../src/images/rapid-proto/smiley.png\";\nimport led_arrows from \"../src/images/rapid-proto/arrows.gif\";\nimport led_ok from \"../src/images/rapid-proto/ok.gif\";\nimport led_snake from \"../src/images/rapid-proto/snake.gif\";\nimport wood1 from \"../src/images/rapid-proto/wood1.png\";\nimport wood2 from \"../src/images/rapid-proto/wood2.png\";\nimport wood3 from \"../src/images/rapid-proto/wood3.png\";\nimport wood4 from \"../src/images/rapid-proto/wood4.png\";\nimport wire1 from \"../src/images/rapid-proto/wire1.png\";\nimport wire2 from \"../src/images/rapid-proto/wire2.png\";\nimport wire3 from \"../src/images/rapid-proto/wire3.png\";\nimport wire4 from \"../src/images/rapid-proto/wire4.png\";\nimport wires from \"../src/images/rapid-proto/wires.png\";\nexport const _frontmatter = {\n  \"title\": \"Rapid Prototyping\",\n  \"description\": \"Rapid prototyping projects including Arduino, CAD, woodworking, and metalworking\",\n  \"title_color\": \"#F2F2F2\",\n  \"order\": 21,\n  \"hero_img\": \"../src/images/rapid-proto/moon_bunnies_d.JPG\",\n  \"hero_img_alt\": \"Moon Bunnies CAD rendering\",\n  \"hero_img_description\": \"Moon Bunnies CAD rendering\",\n  \"next\": \"Morph\",\n  \"next_link\": \"morph\",\n  \"next_color\": \"#F2F2F2\",\n  \"next_img\": \"../src/images/morph/main.png\",\n  \"prev\": \"Cre·​ate\",\n  \"prev_link\": \"create\",\n  \"prev_color\": \"#565252\",\n  \"prev_img\": \"../src/images/create/main.jpeg\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n\n\n\n    <div className={subTitle}>\nRhino Grasshopper\n    </div>\n    <div style={{\n      \"marginBottom\": \"3rem\"\n    }}>\nA set of practice renderings made with Rhino 3D Grasshopper plugin.\n    </div>\n    <div className={imgGrid}>\n      <img className={image2} src={rhino1} alt={\"Rhino Grasshopper rendering\"} />\n      <img className={image2} src={rhino2} alt={\"Rhino Grasshopper rendering\"} />\n      <img className={image2} src={rhino3} alt={\"Rhino Grasshopper rendering\"} />\n      <img className={image2} src={rhino5} alt={\"Rhino Grasshopper rendering\"} />\n      <img className={image2} src={rhino6} alt={\"Rhino Grasshopper rendering\"} />\n      <img className={image2} src={rhino7} alt={\"Rhino Grasshopper rendering\"} />\n    </div>\n    <div className={subTitle}>\nGear Mechenism\n    </div>\n    <div className={imgGrid}>\n      <img className={image2} src={gear1} alt={\"Gear Mechenism rendering\"} />\n      <img className={image2} src={gear2} alt={\"Gear Mechenism rendering\"} />\n    </div>\n    <div>\n      <blockquote>\n        <p parentName=\"blockquote\">{`'Intended as a substitute for the crank. Reciprocating rectilinear motion of the double rack gives a continuous rotary motion to the center gear. The teeth on the rack act upon those of the two semi-circular toothed sectors, and the spur-gears attached to the sectors operate upon the center gear. The two stops on the rack shown by dotted lines are caught by the curved piece on the center gear, and lead the toothed sectors alternately into gear with the double rack.' `}</p>\n      </blockquote>\n    </div>\n    <div style={{\n      \"textAlign\": \"center\",\n      \"marginBottom\": \"3rem\"\n    }}>\n      <blockquote>\n        <p parentName=\"blockquote\">{`-`}{` no.123 from 507 Mechanical Movements `}{`-`}</p>\n      </blockquote>\n    </div>\n    <video autoPlay='true' loop muted disablePictureInPicture controlsList=\"nodownload\" playsInline allowFullScreen=\"false\" className={video2} style={{\n      \"marginBottom\": \"3rem\"\n    }}>\n      <source src={gear_anim} alt={\"Gear Mechenism simulation animation\"} type=\"video/mp4\" /></video>\n    <div className={subTitle}>\nMoon Bunnies\n    </div>\n    <div className={imgGrid}>\n      <img className={image2} src={mb1} alt={\"Moon Bunnies CAD rendering\"} />\n      <img className={image2} src={mb2} alt={\"Moon Bunnies CAD rendering\"} />\n      <img className={image2} src={mb3} alt={\"Moon Bunnies CAD rendering\"} />\n      <img className={image2} src={mb4} alt={\"Moon Bunnies CAD rendering\"} />\n      <img className={image2} src={mb5} alt={\"Moon Bunnies CAD rendering\"} />\n      <img className={image2} src={mb6} alt={\"Moon Bunnies CAD rendering\"} />\n    </div>\n    <div style={{\n      \"marginBottom\": \"3rem\"\n    }}>\nThis is a model of an automaton that uses cams and gears to bring life to the two moon bunnies making rice cakes using Jeolgu, the gray pot in the middle. \nI was inspired by a Korean traditional fable about rabbits living in the moon making rice cakes. The automaton mimics the motion of hitting a rice cake dough in a Jeolgu (a type of traditional Korean mortar and pestle set).\n    </div>\n    <video autoPlay='true' loop muted disablePictureInPicture controlsList=\"nodownload\" playsInline allowFullScreen=\"false\" style={{\n      \"marginBottom\": \"3rem\"\n    }} className={video2}>\n      <source src={mb_anim} alt={\"Moon bunnies simulation animation\"} type=\"video/mp4\" /></video>\n    <div className={subTitle}>\nArdunio-controlled 8x8 LED \n    </div>\n    <div className={imgGrid}>\n      <img className={image2} src={led_smile} alt={\"8x8 LED test : smile\"} />\n      <img className={image2} src={led_ok} alt={\"8x8 LED test : ok\"} />\n      <img className={image2} src={led_arrows} alt={\"8x8 LED + buttons test : arrows\"} />\n    </div>\n    <h2 style={{\n      \"marginTop\": \"3rem\",\n      \"textAlign\": \"center\"\n    }}>\nSnake Game\n    </h2>\n    <div className={imgGrid}>\n      <img className={image2} src={led_snake} alt={\"8x8 LED snake game example play\"} />\n      <img className={image2} src={led_gg} alt={\"End of game screen, 8x8 LED snake game\"} />\n    </div>\n    <div style={{\n      \"marginBottom\": \"3rem\"\n    }}>\nI wrote a code for wrap-around snake game in Ardunio. \nThe four buttons are controlled by one analog pin. \nWhich button is pressed is detected by the amount of current flowing to the analog pin, as the buttons are sequentially connected with resistors. The end state shows 'GG' and an arrow pointing at the reset button for another round of game. This version of the game doesn't have a concrete win state, but it can be easily added by modifying few lines of code.  \n    </div>\n    <div className={subTitle}>\n      <i>Mini Gallery</i> (2022)\n    </div>\n    <div style={{\n      \"marginBottom\": \"3rem\"\n    }}>\n      <b>Media List:</b> Plywood, Clear PVC Sheet, Plastic Capsules, found objects\n    </div>\n    <div className={imgGrid}>\n      <img className={image2} src={wood2} alt={\"Mini Gallery sculpture made with wood\"} />\n      <img className={image2} src={wood3} alt={\"Mini Gallery sculpture made with wood\"} />\n      <img className={image2} src={wood4} alt={\"Mini Gallery sculpture made with wood\"} />\n    </div>\n    <div className={twoGrid}>\n      <img className={image} style={{\n        \"justifyContent\": \"center\",\n        \"display\": \"flex\",\n        \"margin\": \"auto\",\n        \"width\": \"100%\"\n      }} src={wood1} alt={\"Mini Gallery sculpture made with wood\"} />\n      <div className={elem2}>\nGallery space doesn’t have to be confined to what we so call a ‘white cube’ space. Art can be displayed and curated through various means, including the toy capsule vending machine. Inspired by the childhood capsule vending machines I often used to collect a series of toys, I built an interactive piece that invites the audience to touch and pull the slider to have the work present each capsule that encloses a different piece in a collection. From a holistic perspective of the collection in a bundle of capsules inside the machine to an individual inspection upon drawing each capsule away from its exhibition space, Collection Capsule Vendor allows the audience to approach and explore the works from new perspectives.\n        <p>{`For the first presentation of this mini gallery space (first photo), I selected a theme of ‘Mark-making’, where each capsule in the machine contains a different medium that can be used to leave a mark for various purposes. `}</p>\n      </div>\n    </div>\n    <div className={subTitle}>\n      <i>Patterns</i> (2022)\n    </div>\n    <div style={{\n      \"marginBottom\": \"3rem\"\n    }}>\n      <b>Media List:</b> Rope, Aluminum Wires, Plaster Cloth, Acrylic Paint\n    </div>\n    <div className={imgGrid}>\n      <img className={image2} src={wire3} alt={\"'Patterns' sculpture made with plaster cloth, aluminum wire, rope, and acrylic paint\"} />\n      <img className={image2} src={wire4} alt={\"'Patterns' sculpture made with plaster cloth, aluminum wire, rope, and acrylic paint\"} />\n    </div>\n    <div className={imgGrid}>\n      <img className={image2} src={wire1} alt={\"'Patterns' sculpture made with plaster cloth, aluminum wire, rope, and acrylic paint\"} />\n      <img className={image2} src={wire2} alt={\"'Patterns' sculpture made with plaster cloth, aluminum wire, rope, and acrylic paint\"} />\n    </div>\n    <div style={{\n      \"marginBottom\": \"3rem\"\n    }}>\nWhat makes a wearable a wearable? Upon seeking for a common ground across diverse products in the fashion industry, I noticed that perhaps what makes a wearable a wearable is that it’s a medium weaved in different patterns with unique selection of decorations. For example, a sweater, which is one of the common wearables, can have different designs based on the colors and patterns the thread is weaved with. \n    </div>\n    <div className={twoGrid}>\n      <img className={image} style={{\n        \"justifyContent\": \"center\",\n        \"display\": \"flex\",\n        \"margin\": \"auto\",\n        \"width\": \"100%\"\n      }} src={wires} alt={\"'Patterns' sculpture beads work in progress (wireframe)\"} />\n      <div className={elem2}>\nOccasionally, there also are beads and bows that interwoven into the piece, giving another character to the clothing. Inspired by this definition of wearable, I wanted to see how far we can expand on this definition to produce a wearable. I then remembered how I used to play Cat’s Cradle with a simple loop made from a long thread, as well as the diverse patterns it created as different people took turns to move to the next pattern. Patterns is an enlarged version of the starting pattern of Cat’s Cradle game in action, with the beads placed throughout as a unique flavor of this version of Cat’s Cradle.  \n      </div>\n    </div>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","className","subTitle","style","imgGrid","image2","src","rhino1","alt","rhino2","rhino3","rhino5","rhino6","rhino7","gear1","gear2","parentName","autoPlay","loop","muted","disablePictureInPicture","controlsList","playsInline","allowFullScreen","video2","gear_anim","type","mb1","mb2","mb3","mb4","mb5","mb6","mb_anim","led_smile","led_ok","led_arrows","led_snake","led_gg","wood2","wood3","wood4","twoGrid","image","wood1","elem2","wire3","wire4","wire1","wire2","wires","isMDXComponent","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf"],"sourceRoot":""}